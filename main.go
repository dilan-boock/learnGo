package main

import "fmt"

func main() {
	//Возьмем любое натуральное число. Если оно четное - разделим его пополам, если нечетное - умножим на 3, прибавим 1 и разделим пополам. Повторим эти действия с вновь полученным числом. Гипотеза гласит, что независимо от выбора первого числа рано или поздно мы получим 1.
	//
	//Проверим гипотезу Сиракуз для всех чисел от 20 до 30.
	//
	//В цикле будем выполнять над числом действия: если оно четно, то делить на два, иначе - умножать на 3, прибавлять единицу и делить на 2. Эти действия будем выполнять до тех пор, пока число не станет равным единице. Если гипотеза Сиракуз не верна, и найдется такое число, которое не станет равным 1, то произойдет зацикливание.

	n := 20
	for i := 20; i <= 30; i++ {
		for n != 1 {
			switch {
			case i%2 == 0:
				n = n / 2
				fmt.Println("n = ", n)
			case i%2 != 0:
				n = (n*3 + 1) / 2
				fmt.Println("n = ", n)
			}
		}
		fmt.Println("Теорема доказана!")
		break
	}
}
